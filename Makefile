 # ==========================================
# üöÄ E-commerce API - Makefile
# ==========================================

.PHONY: help install dev prod build test clean logs health

# Default target
.DEFAULT_GOAL := help

# Colors for output
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
NC := \033[0m # No Color

## üìö Help
help: ## Show this help message
	@echo "$(CYAN)üöÄ E-commerce API Commands$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "Usage:\n  make $(CYAN)<target>$(NC)\n\nTargets:\n"} /^[a-zA-Z_-]+:.*?##/ { printf "  $(CYAN)%-15s$(NC) %s\n", $$1, $$2 } /^##@/ { printf "\n$(YELLOW)%s$(NC)\n", substr($$0, 5) }' $(MAKEFILE_LIST)

##@ üîß Development
install: ## Install dependencies
	@echo "$(CYAN)üì¶ Installing dependencies...$(NC)"
	npm ci

dev: ## Start development environment with Docker
	@echo "$(CYAN)üöÄ Starting development environment...$(NC)"
	./scripts/dev.sh

dev-local: ## Start development without Docker
	@echo "$(CYAN)üîß Starting local development...$(NC)"
	npm run start:dev

##@ üöÄ Production
prod: ## Deploy to production with Docker
	@echo "$(CYAN)üöÄ Deploying to production...$(NC)"
	./scripts/prod.sh

build: ## Build the application
	@echo "$(CYAN)üî® Building application...$(NC)"
	npm run build

##@ üê≥ Docker Commands
docker-up: ## Start Docker services
	@echo "$(CYAN)üê≥ Starting Docker services...$(NC)"
	docker-compose up -d

docker-down: ## Stop Docker services
	@echo "$(CYAN)üõë Stopping Docker services...$(NC)"
	docker-compose down

docker-build: ## Build Docker image
	@echo "$(CYAN)üî® Building Docker image...$(NC)"
	docker-compose build --no-cache

docker-logs: ## View Docker logs
	@echo "$(CYAN)üìã Viewing Docker logs...$(NC)"
	docker-compose logs -f

docker-clean: ## Clean Docker containers and volumes
	@echo "$(CYAN)üßπ Cleaning Docker containers and volumes...$(NC)"
	docker-compose down -v --remove-orphans
	docker system prune -f

##@ üóÑÔ∏è Database
db-migrate: ## Run database migrations
	@echo "$(CYAN)üóÑÔ∏è Running database migrations...$(NC)"
	npm run migration:run

db-seed: ## Run database seeders
	@echo "$(CYAN)üå± Running database seeders...$(NC)"
	npm run seed

db-setup: ## Setup database (migrate + seed)
	@echo "$(CYAN)üîß Setting up database...$(NC)"
	npm run db:setup

db-refresh: ## Refresh database (revert + migrate + seed)
	@echo "$(CYAN)üîÑ Refreshing database...$(NC)"
	npm run db:refresh

db-reset: ## Reset database completely
	@echo "$(CYAN)‚ö†Ô∏è Resetting database...$(NC)"
	npm run db:reset

##@ üß™ Testing
test: ## Run unit tests
	@echo "$(CYAN)üß™ Running unit tests...$(NC)"
	npm run test

test-watch: ## Run tests in watch mode
	@echo "$(CYAN)üëÄ Running tests in watch mode...$(NC)"
	npm run test:watch

test-cov: ## Run tests with coverage
	@echo "$(CYAN)üìä Running tests with coverage...$(NC)"
	npm run test:cov

test-e2e: ## Run E2E tests
	@echo "$(CYAN)üîç Running E2E tests...$(NC)"
	npm run test:e2e

##@ üìã Code Quality
lint: ## Lint code
	@echo "$(CYAN)üîç Linting code...$(NC)"
	npm run lint

format: ## Format code
	@echo "$(CYAN)üíÖ Formatting code...$(NC)"
	npm run format

##@ üìö Documentation
docs-gen: ## Generate documentation
	@echo "$(CYAN)üìö Generating documentation...$(NC)"
	npm run compodoc:gen

docs-serve: ## Serve documentation
	@echo "$(CYAN)üåê Serving documentation...$(NC)"
	npm run compodoc:serve

##@ üè• Health & Monitoring
health: ## Check API health
	@echo "$(CYAN)üè• Checking API health...$(NC)"
	curl -f http://localhost:3000/health && echo "$(GREEN)‚úÖ API is healthy$(NC)" || echo "$(RED)‚ùå API is unhealthy$(NC)"

logs: ## View application logs
	@echo "$(CYAN)üìã Viewing application logs...$(NC)"
	tail -f logs/*.log 2>/dev/null || echo "$(YELLOW)No log files found. Start the application first.$(NC)"

status: ## Show services status
	@echo "$(CYAN)üìä Services Status:$(NC)"
	@docker-compose ps 2>/dev/null || echo "$(YELLOW)Docker Compose not running$(NC)"

##@ üîê Security
security-audit: ## Run security audit
	@echo "$(CYAN)üîê Running security audit...$(NC)"
	npm audit

security-fix: ## Fix security vulnerabilities
	@echo "$(CYAN)üîß Fixing security vulnerabilities...$(NC)"
	npm audit fix

##@ üßπ Cleanup
clean: ## Clean build artifacts and dependencies
	@echo "$(CYAN)üßπ Cleaning build artifacts...$(NC)"
	rm -rf dist/
	rm -rf node_modules/
	rm -rf coverage/
	rm -rf logs/*.log

clean-all: clean docker-clean ## Clean everything (build + docker)
	@echo "$(GREEN)‚úÖ Everything cleaned!$(NC)"

##@ üöÄ Deployment
deploy-vercel: ## Deploy to Vercel
	@echo "$(CYAN)üöÄ Deploying to Vercel...$(NC)"
	vercel deploy --prod

deploy-heroku: ## Deploy to Heroku
	@echo "$(CYAN)üöÄ Deploying to Heroku...$(NC)"
	git push heroku main

##@ ‚ÑπÔ∏è Information
info: ## Show project information
	@echo "$(CYAN)üìã Project Information:$(NC)"
	@echo "  Name: E-commerce API"
	@echo "  Version: $(shell node -p "require('./package.json').version")"
	@echo "  Node: $(shell node --version)"
	@echo "  NPM: $(shell npm --version)"
	@echo "  Docker: $(shell docker --version 2>/dev/null || echo 'Not installed')"
	@echo "  Docker Compose: $(shell docker-compose --version 2>/dev/null || echo 'Not installed')"

env-check: ## Check environment variables
	@echo "$(CYAN)üîç Checking environment variables...$(NC)"
	@test -f .env && echo "$(GREEN)‚úÖ .env file exists$(NC)" || echo "$(RED)‚ùå .env file missing$(NC)"
	@test -n "$$DB_HOST" && echo "$(GREEN)‚úÖ DB_HOST is set$(NC)" || echo "$(YELLOW)‚ö†Ô∏è DB_HOST not set$(NC)"
	@test -n "$$JWT_SECRET" && echo "$(GREEN)‚úÖ JWT_SECRET is set$(NC)" || echo "$(YELLOW)‚ö†Ô∏è JWT_SECRET not set$(NC)"