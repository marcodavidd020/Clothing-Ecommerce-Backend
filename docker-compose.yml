 version: '3.8'

services:
  # ============ DATABASE SERVICE ============
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-ecommerce_db}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_DATABASE:-ecommerce_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============ REDIS SERVICE ============
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============ API SERVICE ============
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: ecommerce_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      DB_DATABASE: ${DB_DATABASE:-ecommerce_db}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # App
      APP_URL: ${APP_URL:-http://localhost:3000}
      
      # Email (optional)
      MAIL_HOST: ${MAIL_HOST:-}
      MAIL_PORT: ${MAIL_PORT:-}
      MAIL_USER: ${MAIL_USER:-}
      MAIL_PASS: ${MAIL_PASS:-}
      
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============ PGADMIN SERVICE (Optional) ============
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ecommerce.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ecommerce_network
    depends_on:
      - postgres
    profiles:
      - tools

  # ============ REDIS COMMANDER (Optional) ============
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce_redis_commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis123}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - ecommerce_network
    depends_on:
      - redis
    profiles:
      - tools

# ============ VOLUMES ============
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# ============ NETWORKS ============
networks:
  ecommerce_network:
    driver: bridge